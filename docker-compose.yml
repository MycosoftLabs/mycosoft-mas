version: "3.9"

services:
  mas-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    ports: ["8001:8000"]
    command: >
      sh -c "wait-for-it redis:6379 -t 60 &&
             wait-for-it db:5432 -t 60 &&
             python -m mycosoft_mas.orchestrator"
    environment:
      - MAS_ENV=development
      - DEBUG_MODE=true
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://mas:mas@db:5432/mas
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on: [redis, db]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mas-agent-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: >
      sh -c "wait-for-it redis:6379 -t 60 &&
             wait-for-it db:5432 -t 60 &&
             python -m mycosoft_mas.agents.management.agent_manager"
    environment:
      - MAS_ENV=development
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://mas:mas@db:5432/mas
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on: [redis, db, mas-orchestrator]

  mas-task-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: >
      sh -c "wait-for-it redis:6379 -t 60 &&
             wait-for-it db:5432 -t 60 &&
             python -m mycosoft_mas.agents.management.task_manager"
    environment:
      - MAS_ENV=development
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://mas:mas@db:5432/mas
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on: [redis, db, mas-orchestrator]

  mas-integration-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: >
      sh -c "wait-for-it redis:6379 -t 60 &&
             wait-for-it db:5432 -t 60 &&
             python -m mycosoft_mas.agents.integrations.integration_manager"
    environment:
      - MAS_ENV=development
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://mas:mas@db:5432/mas
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on: [redis, db, mas-orchestrator]

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: mas
      POSTGRES_USER: mas
      POSTGRES_PASSWORD: mas
    ports: ["5432:5432"]
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mas"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    ports: ["9090:9090"]
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports: ["3002:3000"]
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  myca-app:
    build:
      context: .
      dockerfile: Dockerfile.next
      target: runner
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./app:/app/app
      - ./components:/app/components
      - ./lib:/app/lib
      - ./public:/app/public
      - ./styles:/app/styles
    depends_on:
      - mas-orchestrator

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data: 
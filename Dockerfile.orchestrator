# Builder stage
FROM python:3.11-slim as builder

WORKDIR /app

# Install system build dependencies
RUN apt-get update && apt-get install -y \
    gnupg \
    wget \
    curl \
    unzip \
    git \
    build-essential \
    python3-dev \
    libpq-dev \
    jq \
    redis-server \
    && rm -rf /var/lib/apt/lists/*

# Install poetry
RUN curl -sSL https://install.python-poetry.org | python3 - && \
    ln -s /root/.local/bin/poetry /usr/local/bin/poetry

# Copy dependency files first for better caching
COPY pyproject.toml poetry.lock ./
COPY setup.py README.md ./

# Install dependencies using poetry
RUN poetry config virtualenvs.create false && \
    poetry install --no-interaction --no-ansi --no-root --with dev

# Install spacy model
RUN python -m spacy download en_core_web_sm

# Copy application files
COPY mycosoft_mas ./mycosoft_mas
COPY config.yaml /app/config.yaml

# Install the project itself
RUN poetry install --no-interaction --no-ansi

# Runtime stage
FROM python:3.11-slim

WORKDIR /app

# Install runtime system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    unzip \
    xvfb \
    libpq5 \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libatspi2.0-0 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgbm1 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    xdg-utils \
    libu2f-udev \
    libvulkan1 \
    libxss1 \
    libxtst6 \
    redis-server \
    && rm -rf /var/lib/apt/lists/*

# Install Google Chrome and ChromeDriver with improved security
RUN wget -q -O /usr/share/keyrings/google-chrome.asc https://dl.google.com/linux/linux_signing_key.pub && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.asc] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list && \
    apt-get update && \
    apt-get install -y google-chrome-stable && \
    CHROME_VERSION=$(google-chrome-stable --version | cut -d ' ' -f3) && \
    CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1) && \
    LATEST_DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHROME_MAJOR_VERSION") && \
    wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$LATEST_DRIVER_VERSION/linux64/chromedriver-linux64.zip" && \
    unzip chromedriver-linux64.zip && \
    mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver && \
    chmod 755 /usr/local/bin/chromedriver && \
    rm -rf chromedriver-linux64.zip chromedriver-linux64 && \
    echo "export CHROME_VERSION=$CHROME_VERSION" >> /etc/profile.d/chrome-version.sh && \
    chmod 644 /etc/profile.d/chrome-version.sh && \
    echo "Chrome Version: $(google-chrome-stable --version)" && \
    echo "ChromeDriver Version: $(chromedriver --version)"

# Create non-root user and setup directories with proper permissions
RUN useradd -m -s /bin/bash app && \
    mkdir -p /app/data /app/logs && \
    chown -R app:app /app && \
    mkdir -p /home/app/.config/google-chrome && \
    chown -R app:app /home/app/.config

# Copy Python packages and application files from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /app /app
RUN chown -R app:app /app

USER app

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    DISPLAY=:99 \
    SELENIUM_HEADLESS=1 \
    CHROME_BIN=/usr/bin/google-chrome \
    CHROME_PATH=/usr/bin/google-chrome \
    CHROME_SANDBOX=/usr/bin/google-chrome-sandbox \
    BASH_ENV=/etc/profile.d/chrome-version.sh \
    MAS_ENV=development \
    DEBUG_MODE=true \
    LOG_LEVEL=INFO \
    REDIS_URL=redis://localhost:6379/0 \
    DATABASE_URL=postgresql://mas:mas@db:5432/mas \
    DASHBOARD_HOST=0.0.0.0 \
    DASHBOARD_PORT=8000 \
    DASHBOARD_DEBUG=true

# Chrome flags for security and stability
ENV CHROME_FLAGS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --disable-software-rasterizer --disable-extensions --disable-background-networking --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-breakpad --disable-client-side-phishing-detection --disable-default-apps --disable-dev-shm-usage --disable-infobars --disable-notifications --disable-popup-blocking --disable-prompt-on-repost --disable-sync --disable-translate --metrics-recording-only --no-first-run --safebrowsing-disable-auto-update --password-store=basic --use-mock-keychain --disable-features=InterestFeedContentSuggestions,CalculateNativeWinOcclusion"

# Expose port
EXPOSE 8000

# Simplified health check that covers all critical processes
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD ps aux | grep -q "[p]ython.*orchestrator" && \
        ps aux | grep -q "[X]vfb.*:99" && \
        ps aux | grep -q "[g]oogle-chrome" || exit 1

# Start application with Xvfb and Redis
CMD redis-server & \
    Xvfb :99 -screen 0 1024x768x16 & \
    python -m mycosoft_mas.run_mas 